/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DirectoryLink } from "./DirectoryLink";
import { DirectoryLinkCountArgs } from "./DirectoryLinkCountArgs";
import { DirectoryLinkFindManyArgs } from "./DirectoryLinkFindManyArgs";
import { Query } from "../../query/base/Query";
import { DirectoryLinkFindUniqueArgs } from "./DirectoryLinkFindUniqueArgs";
import { CreateDirectoryLinkArgs } from "./CreateDirectoryLinkArgs";
import { UpdateDirectoryLinkArgs } from "./UpdateDirectoryLinkArgs";
import { DeleteDirectoryLinkArgs } from "./DeleteDirectoryLinkArgs";
import { DirectoryLinkService } from "../directoryLink.service";
@graphql.Resolver(() => DirectoryLink)
export class DirectoryLinkResolverBase {
  constructor(protected readonly service: DirectoryLinkService) {}

  async _directoryLinksMeta(
    @graphql.Args() args: DirectoryLinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DirectoryLink])
  async directoryLinks(
    @graphql.Args() args: DirectoryLinkFindManyArgs
  ): Promise<DirectoryLink[]> {
    return this.service.directoryLinks(args);
  }

  @graphql.Query(() => DirectoryLink, { nullable: true })
  async directoryLink(
    @graphql.Args() args: DirectoryLinkFindUniqueArgs
  ): Promise<DirectoryLink | null> {
    const result = await this.service.directoryLink(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DirectoryLink)
  async createDirectoryLink(
    @graphql.Args() args: CreateDirectoryLinkArgs
  ): Promise<DirectoryLink> {
    return await this.service.createDirectoryLink({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DirectoryLink)
  async updateDirectoryLink(
    @graphql.Args() args: UpdateDirectoryLinkArgs
  ): Promise<DirectoryLink | null> {
    try {
      return await this.service.updateDirectoryLink({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DirectoryLink)
  async deleteDirectoryLink(
    @graphql.Args() args: DeleteDirectoryLinkArgs
  ): Promise<DirectoryLink | null> {
    try {
      return await this.service.deleteDirectoryLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
