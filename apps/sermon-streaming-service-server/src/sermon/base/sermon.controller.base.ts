/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SermonService } from "../sermon.service";
import { SermonCreateInput } from "./SermonCreateInput";
import { Sermon } from "./Sermon";
import { SermonFindManyArgs } from "./SermonFindManyArgs";
import { SermonWhereUniqueInput } from "./SermonWhereUniqueInput";
import { SermonUpdateInput } from "./SermonUpdateInput";

export class SermonControllerBase {
  constructor(protected readonly service: SermonService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sermon })
  async createSermon(@common.Body() data: SermonCreateInput): Promise<Sermon> {
    return await this.service.createSermon({
      data: {
        ...data,

        speaker: data.speaker
          ? {
              connect: data.speaker,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        date: true,
        videoUrl: true,

        speaker: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sermon] })
  @ApiNestedQuery(SermonFindManyArgs)
  async sermons(@common.Req() request: Request): Promise<Sermon[]> {
    const args = plainToClass(SermonFindManyArgs, request.query);
    return this.service.sermons({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        date: true,
        videoUrl: true,

        speaker: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sermon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sermon(
    @common.Param() params: SermonWhereUniqueInput
  ): Promise<Sermon | null> {
    const result = await this.service.sermon({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        date: true,
        videoUrl: true,

        speaker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sermon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSermon(
    @common.Param() params: SermonWhereUniqueInput,
    @common.Body() data: SermonUpdateInput
  ): Promise<Sermon | null> {
    try {
      return await this.service.updateSermon({
        where: params,
        data: {
          ...data,

          speaker: data.speaker
            ? {
                connect: data.speaker,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          date: true,
          videoUrl: true,

          speaker: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sermon })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSermon(
    @common.Param() params: SermonWhereUniqueInput
  ): Promise<Sermon | null> {
    try {
      return await this.service.deleteSermon({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          description: true,
          date: true,
          videoUrl: true,

          speaker: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
