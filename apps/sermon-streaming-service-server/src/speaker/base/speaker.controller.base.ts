/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SpeakerService } from "../speaker.service";
import { SpeakerCreateInput } from "./SpeakerCreateInput";
import { Speaker } from "./Speaker";
import { SpeakerFindManyArgs } from "./SpeakerFindManyArgs";
import { SpeakerWhereUniqueInput } from "./SpeakerWhereUniqueInput";
import { SpeakerUpdateInput } from "./SpeakerUpdateInput";
import { SermonFindManyArgs } from "../../sermon/base/SermonFindManyArgs";
import { Sermon } from "../../sermon/base/Sermon";
import { SermonWhereUniqueInput } from "../../sermon/base/SermonWhereUniqueInput";

export class SpeakerControllerBase {
  constructor(protected readonly service: SpeakerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Speaker })
  async createSpeaker(
    @common.Body() data: SpeakerCreateInput
  ): Promise<Speaker> {
    return await this.service.createSpeaker({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        bio: true,
        imageUrl: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Speaker] })
  @ApiNestedQuery(SpeakerFindManyArgs)
  async speakers(@common.Req() request: Request): Promise<Speaker[]> {
    const args = plainToClass(SpeakerFindManyArgs, request.query);
    return this.service.speakers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        bio: true,
        imageUrl: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Speaker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async speaker(
    @common.Param() params: SpeakerWhereUniqueInput
  ): Promise<Speaker | null> {
    const result = await this.service.speaker({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        bio: true,
        imageUrl: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Speaker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSpeaker(
    @common.Param() params: SpeakerWhereUniqueInput,
    @common.Body() data: SpeakerUpdateInput
  ): Promise<Speaker | null> {
    try {
      return await this.service.updateSpeaker({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          bio: true,
          imageUrl: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Speaker })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSpeaker(
    @common.Param() params: SpeakerWhereUniqueInput
  ): Promise<Speaker | null> {
    try {
      return await this.service.deleteSpeaker({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          bio: true,
          imageUrl: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/sermons")
  @ApiNestedQuery(SermonFindManyArgs)
  async findSermons(
    @common.Req() request: Request,
    @common.Param() params: SpeakerWhereUniqueInput
  ): Promise<Sermon[]> {
    const query = plainToClass(SermonFindManyArgs, request.query);
    const results = await this.service.findSermons(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        date: true,
        videoUrl: true,

        speaker: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sermons")
  async connectSermons(
    @common.Param() params: SpeakerWhereUniqueInput,
    @common.Body() body: SermonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sermons: {
        connect: body,
      },
    };
    await this.service.updateSpeaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sermons")
  async updateSermons(
    @common.Param() params: SpeakerWhereUniqueInput,
    @common.Body() body: SermonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sermons: {
        set: body,
      },
    };
    await this.service.updateSpeaker({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sermons")
  async disconnectSermons(
    @common.Param() params: SpeakerWhereUniqueInput,
    @common.Body() body: SermonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sermons: {
        disconnect: body,
      },
    };
    await this.service.updateSpeaker({
      where: params,
      data,
      select: { id: true },
    });
  }
}
