/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Speaker as PrismaSpeaker,
  Sermon as PrismaSermon,
} from "@prisma/client";

export class SpeakerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SpeakerCountArgs, "select">): Promise<number> {
    return this.prisma.speaker.count(args);
  }

  async speakers(args: Prisma.SpeakerFindManyArgs): Promise<PrismaSpeaker[]> {
    return this.prisma.speaker.findMany(args);
  }
  async speaker(
    args: Prisma.SpeakerFindUniqueArgs
  ): Promise<PrismaSpeaker | null> {
    return this.prisma.speaker.findUnique(args);
  }
  async createSpeaker(args: Prisma.SpeakerCreateArgs): Promise<PrismaSpeaker> {
    return this.prisma.speaker.create(args);
  }
  async updateSpeaker(args: Prisma.SpeakerUpdateArgs): Promise<PrismaSpeaker> {
    return this.prisma.speaker.update(args);
  }
  async deleteSpeaker(args: Prisma.SpeakerDeleteArgs): Promise<PrismaSpeaker> {
    return this.prisma.speaker.delete(args);
  }

  async findSermons(
    parentId: string,
    args: Prisma.SermonFindManyArgs
  ): Promise<PrismaSermon[]> {
    return this.prisma.speaker
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sermons(args);
  }
}
